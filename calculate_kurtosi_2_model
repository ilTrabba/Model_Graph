from scipy.stats import kurtosis
from safetensors.torch import load_file
from transformers import AutoConfig, AutoModel

def calc_ku(model, layer_kind=None):
    """ calculate kurtosis of a model """
    model_ku = 0
    for name, layer in model.state_dict().items():
        if len(layer.shape) != 2 or layer.shape[0] != layer.shape[1]:
            continue

        if layer_kind is not None:
            if layer_kind not in name:
                continue
        ku = kurtosis(layer.flatten())
        model_ku += ku
    return model_ku


def load_model_from_safetensors(weights_path: str, base_config: str = "bert-base-uncased"):
    """
    Carica un modello BERT a partire da un file .safetensors locale,
    istanziando la rete dalla config indicata e caricando i pesi.
    """
    config = AutoConfig.from_pretrained(base_config)
    model = AutoModel.from_config(config)

    state_dict = load_file(weights_path)  # dict[str, Tensor]
    # Usa strict=False per tollerare eventuali differenze (es. teste di classificazione)
    missing, unexpected = model.load_state_dict(state_dict, strict=False)
    if missing:
        print(f"[load_model_from_safetensors] Missing keys ({len(missing)}):", missing[:10], "..." if len(missing) > 10 else "")
    if unexpected:
        print(f"[load_model_from_safetensors] Unexpected keys ({len(unexpected)}):", unexpected[:10], "..." if len(unexpected) > 10 else "")
    model.eval()
    return model


# Modelli (solo per riferimento; non usati nel caricamento locale)
parent_model_name = "bert-base-uncased"
child_model_name = "saribasmetehan/BERT-BankingClassifier"

# Pesi locali (.safetensors)
parent_weights_path = "/home/trabbo/Documents/Universita/BigData/Models_for_Project/Bert_base.safetensors"
child_weights_path  = "/home/trabbo/Documents/Universita/BigData/Models_for_Project/BERT_bankingClassifier.safetensors"

# Caricamento da .safetensors locali
model_a = load_model_from_safetensors(parent_weights_path, base_config="bert-base-uncased")
model_b = load_model_from_safetensors(child_weights_path,  base_config="bert-base-uncased")

# Calcolo kurtosi
ku_a = calc_ku(model_a, layer_kind='output.dense')  # oppure 'attention.value', 'attention.query', 'attention.key'
ku_b = calc_ku(model_b, layer_kind='output.dense')

print("kurtosi A:", ku_a)
print("kurtosi B:", ku_b)
print("A > B ? ->", ku_a > ku_b)